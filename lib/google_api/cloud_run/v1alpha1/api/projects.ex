# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudRun.V1alpha1.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.CloudRun.V1alpha1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  RPC to list authorized domains.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. Name of the parent Application resource. Example: &#x60;apps/myapp&#x60;.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :pageToken (String.t): Continuation token for fetching the next page of results.
    - :pageSize (integer()): Maximum results to return per page.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_authorizeddomains_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_authorizeddomains_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :pageToken => :query,
      :pageSize => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/authorizeddomains",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListAuthorizedDomainsResponse{}]
    )
  end

  @doc """
  Rpc to get information about a configuration.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the configuration being retrieved. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - configurations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Configuration{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_configurations_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Configuration.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_configurations_get(
        connection,
        projects_id,
        locations_id,
        configurations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/configurations/{configurationsId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "configurationsId" => URI.encode(configurations_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Configuration{}])
  end

  @doc """
  Rpc to list configurations.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number from which the configurations should be listed.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :labelSelector (String.t): Allows to filter resources based on a label. Supported operations are &#x3D;, !&#x3D;, exists, in, and notIn.
    - :fieldSelector (String.t): Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. &#39;metadata.name%3Dlorem&#39;. Not currently used by Cloud Run.
    - :includeUninitialized (boolean()): Not currently used by Cloud Run.
    - :resourceVersion (String.t): The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
    - :continue (String.t): Optional encoded string to continue paging.
    - :limit (integer()): The maximum number of records that should be returned.
    - :watch (boolean()): Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_configurations_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_configurations_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :labelSelector => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :resourceVersion => :query,
      :continue => :query,
      :limit => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/configurations", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListConfigurationsResponse{}]
    )
  end

  @doc """
  Creates a new domain mapping.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number in which this domain mapping should be created.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :body (DomainMapping): 

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_domainmappings_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.DomainMapping.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_domainmappings_create(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/domainmappings", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}])
  end

  @doc """
  Rpc to delete a domain mapping.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the domain mapping being deleted. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - domainmappings_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :apiVersion (String.t): Cloud Run currently ignores this parameter.
    - :kind (String.t): Cloud Run currently ignores this parameter.
    - :propagationPolicy (String.t): Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
    - :orphanDependents (boolean()): Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_domainmappings_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_domainmappings_delete(
        connection,
        projects_id,
        locations_id,
        domainmappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :apiVersion => :query,
      :kind => :query,
      :propagationPolicy => :query,
      :orphanDependents => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/domainmappings/{domainmappingsId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "domainmappingsId" => URI.encode(domainmappings_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a domain mapping.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the domain mapping being retrieved. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - domainmappings_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_domainmappings_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.DomainMapping.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_domainmappings_get(
        connection,
        projects_id,
        locations_id,
        domainmappings_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/domainmappings/{domainmappingsId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "domainmappingsId" => URI.encode(domainmappings_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.DomainMapping{}])
  end

  @doc """
  Rpc to list domain mappings.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number from which the domain mappings should be listed.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :labelSelector (String.t): Allows to filter resources based on a label. Supported operations are &#x3D;, !&#x3D;, exists, in, and notIn.
    - :resourceVersion (String.t): The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
    - :includeUninitialized (boolean()): Not currently used by Cloud Run.
    - :fieldSelector (String.t): Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. &#39;metadata.name%3Dlorem&#39;. Not currently used by Cloud Run.
    - :continue (String.t): Optional encoded string to continue paging.
    - :limit (integer()): The maximum number of records that should be returned.
    - :watch (boolean()): Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_domainmappings_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_domainmappings_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :labelSelector => :query,
      :resourceVersion => :query,
      :includeUninitialized => :query,
      :fieldSelector => :query,
      :continue => :query,
      :limit => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/domainmappings", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListDomainMappingsResponse{}]
    )
  end

  @doc """
  Lists information about the supported locations for this service.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The resource that owns the locations collection, if applicable.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :pageToken (String.t): The standard list page token.
    - :pageSize (integer()): The standard list page size.
    - :filter (String.t): The standard list filter.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListLocationsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListLocationsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_list(connection, projects_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :pageToken => :query,
      :pageSize => :query,
      :filter => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListLocationsResponse{}]
    )
  end

  @doc """
  Rpc to delete a revision.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the revision being deleted. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - revisions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :propagationPolicy (String.t): Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
    - :kind (String.t): Cloud Run currently ignores this parameter.
    - :orphanDependents (boolean()): Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.
    - :apiVersion (String.t): Cloud Run currently ignores this parameter.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_revisions_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_revisions_delete(
        connection,
        projects_id,
        locations_id,
        revisions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :propagationPolicy => :query,
      :kind => :query,
      :orphanDependents => :query,
      :apiVersion => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/revisions/{revisionsId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "revisionsId" => URI.encode(revisions_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a revision.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the revision being retrieved. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - revisions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Revision{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_revisions_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Revision.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_revisions_get(
        connection,
        projects_id,
        locations_id,
        revisions_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/revisions/{revisionsId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "revisionsId" => URI.encode(revisions_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Revision{}])
  end

  @doc """
  Rpc to list revisions.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number from which the revisions should be listed.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :limit (integer()): The maximum number of records that should be returned.
    - :watch (boolean()): Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
    - :labelSelector (String.t): Allows to filter resources based on a label. Supported operations are &#x3D;, !&#x3D;, exists, in, and notIn.
    - :resourceVersion (String.t): The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
    - :includeUninitialized (boolean()): Not currently used by Cloud Run.
    - :fieldSelector (String.t): Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. &#39;metadata.name%3Dlorem&#39;. Not currently used by Cloud Run.
    - :continue (String.t): Optional encoded string to continue paging.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_revisions_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_revisions_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :limit => :query,
      :watch => :query,
      :labelSelector => :query,
      :resourceVersion => :query,
      :includeUninitialized => :query,
      :fieldSelector => :query,
      :continue => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/revisions", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListRevisionsResponse{}]
    )
  end

  @doc """
  Rpc to get information about a route.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the route being retrieved. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - routes_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Route{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_routes_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Route.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_routes_get(
        connection,
        projects_id,
        locations_id,
        routes_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/routes/{routesId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "routesId" => URI.encode(routes_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Route{}])
  end

  @doc """
  Rpc to list routes.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number from which the routes should be listed.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :fieldSelector (String.t): Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. &#39;metadata.name%3Dlorem&#39;. Not currently used by Cloud Run.
    - :includeUninitialized (boolean()): Not currently used by Cloud Run.
    - :resourceVersion (String.t): The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
    - :continue (String.t): Optional encoded string to continue paging.
    - :limit (integer()): The maximum number of records that should be returned.
    - :watch (boolean()): Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.
    - :labelSelector (String.t): Allows to filter resources based on a label. Supported operations are &#x3D;, !&#x3D;, exists, in, and notIn.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_routes_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_routes_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :resourceVersion => :query,
      :continue => :query,
      :limit => :query,
      :watch => :query,
      :labelSelector => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/routes", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListRoutesResponse{}])
  end

  @doc """
  Rpc to create a service.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number in which this service should be created.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :body (Service): 

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_create(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_create(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/services", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Rpc to delete a service. This will cause the Service to stop serving traffic and will delete the child entities like Routes, Configurations and Revisions.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the service being deleted. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :kind (String.t): Cloud Run currently ignores this parameter.
    - :propagationPolicy (String.t): Specifies the propagation policy of delete. Cloud Run currently ignores this setting, and deletes in the background. Please see kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/ for more information.
    - :orphanDependents (boolean()): Deprecated. Specifies the cascade behavior on delete. Cloud Run only supports cascading behavior, so this must be false. This attribute is deprecated, and is now replaced with PropagationPolicy See https://github.com/kubernetes/kubernetes/issues/46659 for more info.
    - :apiVersion (String.t): Cloud Run currently ignores this parameter.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Empty.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_delete(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :kind => :query,
      :propagationPolicy => :query,
      :orphanDependents => :query,
      :apiVersion => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Empty{}])
  end

  @doc """
  Rpc to get information about a service.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the service being retrieved. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_get(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Get the IAM Access Control policy currently in effect for the given Cloud Run service. This result does not include any inherited policies.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - locations_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_get_iam_policy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_get_iam_policy(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Policy{}])
  end

  @doc """
  Rpc to list services.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;parent&#x60;. The project ID or project number from which the services should be listed.
  - locations_id (String.t): Part of &#x60;parent&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :labelSelector (String.t): Allows to filter resources based on a label. Supported operations are &#x3D;, !&#x3D;, exists, in, and notIn.
    - :fieldSelector (String.t): Allows to filter resources based on a specific value for a field name. Send this in a query string format. i.e. &#39;metadata.name%3Dlorem&#39;. Not currently used by Cloud Run.
    - :includeUninitialized (boolean()): Not currently used by Cloud Run.
    - :resourceVersion (String.t): The baseline resource version from which the list or watch operation should start. Not currently used by Cloud Run.
    - :continue (String.t): Optional encoded string to continue paging.
    - :limit (integer()): The maximum number of records that should be returned.
    - :watch (boolean()): Flag that indicates that the client expects to watch this resource as well. Not currently used by Cloud Run.

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_services_list(
        connection,
        projects_id,
        locations_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :labelSelector => :query,
      :fieldSelector => :query,
      :includeUninitialized => :query,
      :resourceVersion => :query,
      :continue => :query,
      :limit => :query,
      :watch => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1alpha1/projects/{projectsId}/locations/{locationsId}/services", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.ListServicesResponse{}]
    )
  end

  @doc """
  Rpc to replace a service.  Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the &#39;status&#39; match the requested &#39;spec&#39;.  May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the service being replaced. If needed, replace {namespace_id} with the project ID.
  - locations_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :body (Service): 

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Service{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_replace_service(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Service.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_replace_service(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Service{}])
  end

  @doc """
  Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - locations_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_set_iam_policy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, GoogleApi.CloudRun.V1alpha1.Model.Policy.t()} | {:error, Tesla.Env.t()}
  def run_projects_locations_services_set_iam_policy(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.Policy{}])
  end

  @doc """
  Returns permissions that a caller has on the specified Project.  There are no permissions required for making this API call.

  ## Parameters

  - connection (GoogleApi.CloudRun.V1alpha1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - locations_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - services_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudRun.V1alpha1.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec run_projects_locations_services_test_iam_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudRun.V1alpha1.Model.TestIamPermissionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def run_projects_locations_services_test_iam_permissions(
        connection,
        projects_id,
        locations_id,
        services_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :upload_protocol => :query,
      :quotaUser => :query,
      :prettyPrint => :query,
      :uploadType => :query,
      :fields => :query,
      :callback => :query,
      :oauth_token => :query,
      :"$.xgafv" => :query,
      :alt => :query,
      :key => :query,
      :access_token => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/v1alpha1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions",
        %{
          "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
          "locationsId" => URI.encode(locations_id, &URI.char_unreserved?/1),
          "servicesId" => URI.encode(services_id, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudRun.V1alpha1.Model.TestIamPermissionsResponse{}]
    )
  end
end
